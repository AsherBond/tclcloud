TclCloud v1.3

------------------------------------------
Description 
------------------------------------------

TclCloud is an opensource tcl interface to the Amazon AWS and Eucalyptus webservices apis that enable 
cloud automation of most of the AWS products and operations. 

Example use cases include the following:

	- starting and stopping EC2 instances
	- attaching EBS volumes
	- creating and interfacing with SimpleDB and RDS instances
	- managing EC2 Autoscale and Load Balancer configurations
	- sending Simple Email Service messages
	- creating, submitting and monitoring Elastic Map Reduce (Hadoop) jobs
	- configuring VPC networks
	- and so on ...

NOTE: The commands in version 1.3 of Tclcloud have changed somewhat from previous versions. Tclcloud no longer uses TclOO, therefore scripts written for previous releases will need to be reworked slightly. 

For more information on the Amazon AWS cloud products, see:
http://aws.amazon.com/products/

Eucalyptus:
http://http://open.eucalyptus.com/

------------------------------------------
Repository and Download
------------------------------------------

https://github.com/cloudsidekick/tclcloud

------------------------------------------
Bug and Feature Requests
------------------------------------------

https://github.com/cloudsidekick/tclcloud/issues

------------------------------------------
How does it work? 
------------------------------------------

All of the Amazon Web Services features are managed through their APIs by connecting to "endpoints" and issuing either REST or SOAP web service calls. Most programming language SDKs provide an abstraction layer to these APIs. TclCloud opens up the AWS API to the TCL developer with minimal abstraction and does not require a new release to support new AWS features to existing products (which happens quite frequently). 

Responses from the AWS endpoint are returned in pure xml format which are easily parsed using tdom.

For more information on the AWS API documentation, see:
http://aws.amazon.com/documentation/

To try out TclCloud you must have an Amazon AWS account with an API access key and secret key. 

Note: TclCloud has been tested on linux and mac. Windows should also work fine. 

Example scripts are located under the samples directory. Change the access and secret key values to run the scripts.

------------------------------------------
Installation
------------------------------------------

Requirements - tcl 8.5, tcllib

Download the TclCloud from the Download button from the Git repository above. Unzip the contents into the lib/tclcloud directory in your tcl home directory. 
Make sure you have tcllib installed.

------------------------------------------
Usage
------------------------------------------

To create a new connection object, substitute your AWS provided access key and secret key. The connection new object will not attempt to create a connection to AWS, it simply creates the connection object for use.

tclcloud::configure <provider> <access key> <secret key> <endpoint list>

	provider - name of the cloud provider (aws, eucalyptus) 
	access key - the AWS or Eucalyptus access key
	secret key - the AWS or Eucalyptus secret key
	endpoint list - a list comprising of a endpoint name (aka region), endpoint address and protocol. 
			Not required for AWS, required for Eucalyptus

AWS Example:

tclcloud::configure aws MYACCESSKEYKJREKJ MYSECRETKEYLKJDLLKJSDDKJF {}

Eucalyptus Example:

tclcloud::configure eucalyptus MYACCESSKEYKJREKJ MYSECRETKEYLKJDLLKJSDDKJF {myeuca euca.myserver.net:8773/services/Eucalyptus http}


To send a request to the AWS or Eucalyptus endpoint:

tclcloud::call <product> <region> <action> <parameters> <api version> 

	product - the AWS product to manage, currently one of the following values: ec2 emr as rds sqs ses cw elb vpc iam ebs
		ec2 - EC2
		emr - Elastic MapReduce
		as - AutoScale
		rds - Relational Database Service
		sqs - Simple Queue Service
		ses - Simple Email Service
		cw - CloudWatch
		elb - Elastic Load Balancer
		vpc - Virtual Private Cloud
		iam - Identity and Access Management
		ebs - Elastic Beanstalk
		sns - Simple Notification Service
		cfn - Cloudformation
	
	region - For AWS: the AWS region to interact with. This is product specific, 
		see the following link for which regions apply to what products. 
		http://docs.amazonwebservices.com/general/latest/gr/index.html
		
		Currently one of the following values: us-east-1, us-west-1, 
		eu-west-1, ap-southeast-1, ap-northeast-1 or leave blank for 
		the default (typically us-east-1)
	
		For Eucalyptus: the endpoint name defined in the configure command

	action - this will correspond with the specific product API operation or action.
		Examples include:
		AssociateAddress
		CreateImage
		GetAttributes
		etc.
	parameter - key / value pairs that will be passed to the API in a tcl list format.

	api version - the api version for the specific product API. Leave blank for the default. 

------------------------------------------
TODO
------------------------------------------

	- add support for S3, Cloudfront, Route53, Import/Export
	- certify Windows and Mac
	- incorporate XML results parser using tdom, to list and json
	- more sample code
	- add support for the OpenStack, Rackspace, vSphere, OpSource, etc. APIs

------------------------------------------
Samples
------------------------------------------

To launch an Ubuntu instance, default region and api version:

package require tclcloud

tclcloud::configure aws MYACCESSKEYKJREKJ MYSECRETKEYLKJDLLKJSDDKJF4 {}

set return_value [tclcloud::call ec2 {} RunInstances {ImageId ami-1aad5273 MinCount 1 MaxCount 1 KeyName myKey SecurityGroup.1 default InstanceType t1.micro Placement.AvailabilityZone us-east-1d} {}]

puts $return_value


To get a list of my machine images for Eucalyptus:

package require tclcloud

tclcloud::configure eucalyptus MYACCESSKEYKJREKJ MYSECRETKEYLKJDLLKJSDDKJF {myeuca euca.myserver.net:8773/services/Eucalyptus http}

set return_value [tclcloud::call ec2 {} DescribeImages {Owner.1 self} {}]

puts $return_value
